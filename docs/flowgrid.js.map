{"version":3,"file":"flowgrid.js","sources":["../src/fg-container.vue","../src/fg-item.vue","../src/index.js"],"sourcesContent":["<template>\n  <div class=\"fg-container\"\n       :class=\"{'fg-no-draggable': !opt.draggable, 'fg-no-resizable': !opt.resizable}\">\n    <div class=\"fg-layout\">\n      <slot></slot>\n      <div class=\"fg-item-dragdrop\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n  // 全局配置\n  let globalConfig = {\n    row: 7,                                            // 网格布局的默认行,默认7行\n    col: 12,                                           // 网格布局的默认列,默认12列\n    distance: 5,                                       // 触发拖拽的拖拽距离,默认5px\n    draggable: true,                                   // 是否允许拖拽, 默认允许\n    resizable: true,                                   // 是否允许缩放, 默认允许\n    nodeMinW: 2,                                       // 节点块的最小宽度, 默认占2格\n    nodeMinH: 2,                                       // 节点块的最小高度, 默认占2格\n    overflow: 5,                                       // 当拖拽或缩放超出网格容器的溢出像素\n    padding: {                                         // 节点块之间的间距, 默认都为5px\n      top: 5,\n      left: 5,\n      right: 5,\n      bottom: 5\n    },\n    cellScale: {                                       // 单元格的宽高比例, 默认16:9\n      w: 16,\n      h: 9\n    },\n    addNodeSize: {                                     // 添加节点的默认尺寸\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2\n    }\n  }\n\n  let core = {\n    // 流布局\n    layout: function (area, data) {\n      var i, len, r, node;\n      // 原理: 遍历数据集, 碰撞检测, 修改node.y, 进行上移.\n      for (i = 0, len = data.length; i < len; i++) {\n        node = data[i];\n        r = this.findEmptyLine(area, node);\n        if (node.y > r) {\n          this.moveUp(area, node, r);\n        }\n      }\n      return this;\n    },\n    // 寻找空行\n    findEmptyLine: function (area, node) {\n      var r, c, len, cell;\n      // 扫描, 找到最接近顶部的空行是第几行\n      for (r = node.y - 1; r >= 0; r--) {\n        for (c = node.x, len = node.x + node.w; c < len; c++) {\n          cell = area[r][c];\n          if (cell || cell == 0) {\n            return r + 1;\n          }\n        }\n      }\n      return 0;\n    },\n    // 上移\n    moveUp: function (area, node, newRow) {\n      this.replaceNodeInArea(area, node);\n      var r, c, rlen, clen;\n      node.y = newRow;\n      for (r = node.y, rlen = node.y + node.h; r < rlen; r++)\n        for (c = node.x, clen = node.x + node.w; c < clen; c++)\n          area[r][c] = node.id;\n    },\n    // 替换区域中的节点\n    replaceNodeInArea: function (area, node, id) {\n      var r, c, rlen, clen;\n      for (r = node.y, rlen = node.y + node.h; r < rlen; r++)\n        for (c = node.x, clen = node.x + node.w; c < clen; c++)\n          area[r] && (area[r][c] = id);\n      return this;\n    },\n    load: function () {\n      var maxRowAndCol = this.getMaxRowAndCol(opt, data);\n      // 重绘\n      this.sortData(data)\n        .buildArea(area, maxRowAndCol.row, maxRowAndCol.col)\n        .putData(area, data)\n        .layout(area, data);\n      view.render(data, elements, opt.container, this);\n    },\n  }\n\n  export default {\n    name: 'fg-container',\n    props: [\n      'setting',\n      'nodes'\n    ],\n    computed: {\n      opt: function () {\n        let options = Object.assign({}, globalConfig, this.setting || {});\n        this.computeCell(options);\n        return options;\n      }\n    },\n    data () {\n      return {\n        area: []\n      }\n    },\n    methods: {\n      // 计算单元格\n      computeCell: function (opt) {\n        opt.cellW = opt.containerW / opt.col;\n        opt.cellH = opt.cellW / opt.cellScale.w * opt.cellScale.h;\n        opt.cellW_Int = Math.floor(opt.cellW);\n        opt.cellH_Int = Math.floor(opt.cellH);\n      },\n      init: function () {\n        this.buildArea();\n      },\n      // 构建网格区域\n      buildArea: function () {\n        let max = this.getMaxRowAndCol();\n        for (let r = 0; r < max.row; r++) {\n          this.area[r] = new Array(max.col);\n        }\n        this.putNodes();\n      },\n      // 取得区域中的最大行和列\n      getMaxRowAndCol: function () {\n        let opt = this.opt;\n        let nodes = this.nodes;\n        let max = {\n          row: opt.row,\n          col: opt.col\n        };\n        if (nodes && nodes.length > 0) {\n          for (let n of nodes) {\n            if (n.y + n.h > max.row) {\n              max.row = n.y + n.h;\n            }\n            if (n.x + n.w > max.col) {\n              max.col = n.x + n.w;\n            }\n          }\n        }\n        return max;\n      },\n      // 将数据铺进网格布局\n      putNodes: function () {\n        let r, c, rlen, clen;\n        for (let node of this.nodes) {\n          for (r = node.y, rlen = node.y + node.h; r < rlen; r++) {\n            for (c = node.x, clen = node.x + node.w; c < clen; c++) {\n              this.area[r][c] = node.id;\n            }\n          }\n        }\n      },\n      // 自动扫描空位添加节点\n      getNodeCoord: function (node) {\n        let nodes = this.nodes;\n        let area = this.area;\n        if (nodes.length === 0) return node;\n        var r, c, maxCol = area[0].length;\n        for (r = 0; r < area.length; r = r + 1) {\n          node.y = r;\n          for (c = 0; c < area[0].length; c = c + 1) {\n            node.x = c;\n            if (node.x + node.w > maxCol) {\n              node.x = 0;\n            }\n            if (!this.collision(area, node))\n              return node;\n          }\n        }\n        node.x = 0;  // area区域都占满了, 另起一行\n        node.y = r;\n        return node;\n      },\n      // 碰撞检测\n      collision: function (area, node) {\n        var r, c, rlen, clen;\n        // 从左到右, 从上到下\n        for (r = node.y, rlen = node.y + node.h; r < rlen; r++) {\n          for (c = node.x, clen = node.x + node.w; c < clen; c++) {\n            if (area[r] && (area[r][c] || area[r][c] == 0)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n    },\n    created () {\n      // 早于 fg-item mounted 方法执行\n      this.init();\n    },\n    beforeUpdate () {\n      // 数据更新时重置区域\n      this.buildArea();\n      //console.log(this);\n    },\n    updated () {\n      //console.log(this);\n    },\n    mounted () {\n      //console.log('mounted');\n    }\n  }\n</script>\n\n<style>\n\n  /* 拖拽过程中阻止文本选中 */\n  body.fg-user-select-none {\n    user-select: none !important;\n  }\n\n  /* 响应式 */\n  @media screen and (max-width: 767px) {\n    .fg-layout {\n      width: auto !important;\n      margin: 0 10px;\n    }\n\n    .fg-layout:after {\n      content: \"\";\n      clear: both;\n    }\n\n    .fg-layout .fg-item-zoom-bar {\n      display: none;\n    }\n\n    .fg-item {\n      position: static;\n      width: 100% !important;\n      height: auto !important;\n      float: left !important;\n      transform: translate(0, 0) !important;\n      margin-bottom: 10px;\n    }\n  }\n\n  .fg-container {\n    position: relative;\n    z-index: 1;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n  }\n\n  .fg-layout {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  .fg-layout.fg-no-resizable .fg-item-zoom-bar {\n    display: none;\n  }\n\n  .fg-layout.fg-no-draggable .fg-item,\n  .fg-layout.fg-no-resizable .fg-item {\n    cursor: default;\n  }\n\n  .fg-item {\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    position: absolute;\n    z-index: 10;\n    background-color: #8fee2b;\n  }\n\n  .fg-item-content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  .fg-item-zoom-bar {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    height: 24px;\n    width: 24px;\n    overflow: hidden;\n    z-index: 2147483647;\n    cursor: se-resize;\n  }\n\n  .fg-item-zoom-bar:before {\n    content: \"\";\n    position: absolute;\n    z-index: 2147483647;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n  }\n\n  .fg-item-dragdrop {\n    box-shadow: 2px 2px 2px rgba(144, 142, 142, 0.6);\n    opacity: 0.8;\n    z-index: 2147483647;\n  }\n\n  .fg-item[data-fg-id=\"placeholder\"] {\n    background-color: #d3d3d3;\n    z-index: 1;\n  }\n\n  .fg-item-animate {\n    -webkit-transform: translate3d(0, 0, 0);\n    -webkit-backface-visibility: hidden;\n    -webkit-transform-style: preserve-3d;\n    transition: transform 0.2s, height 0.2s, width 0.2s;\n  }\n</style>\n","<template>\n  <div class=\"fg-item\" :style=\"itemStyle\">\n    <div class=\"fg-item-content\">\n      <slot></slot>\n    </div>\n    <div class=\"fg-item-zoom-bar\"></div>\n  </div>\n</template>\n\n<script>\n  // import {CONSTANT, globalConfig} from './config';\n  // import utils from './utils';\n  // import handleEvent from './event';\n  // import dragdrop from './dragdrop';\n  // import view from './view';\n  // import Flowgrid from './api';\n\n//  FG_ITEM_ANIMATE: 'fg-item-animate',             // 拖拽块classname 动画效果\n//    FG_ITEM_GRAG_DROP: 'fg-item-dragdrop',          // 正在拖拽的块classname\n//    FG_ITEM_PLACEHOLDER: 'fg-item-placeholder',     // 拖拽块的占位符\n//    PLACEHOLDER: 'placeholder'                      // 占位符\n\n  export default {\n    name: 'fg-item',\n    props: [\n      'node', // {id:'2', x: 0, y: 0, w: 4, h: 4}\n    ],\n    computed: {\n      itemStyle: function () {\n        let opt = this.$parent.opt;\n        let node = this.node;\n        return {\n          transform: \"translate(\" + (node.x * opt.cellW_Int) + \"px,\" + (node.y * opt.cellH_Int) + \"px)\",\n          width: (node.w * opt.cellW_Int - opt.padding.left - opt.padding.right) + 'px',\n          height: (node.h * opt.cellH_Int - opt.padding.top - opt.padding.bottom) + 'px'\n        }\n      }\n    },\n    data () {\n      return {\n      }\n    },\n    mounted () {\n      // console.log(this.$parent.options);\n       console.log('2222');\n    }\n  }\n</script>\n\n<style>\n  .abcd {\n    color: red;\n  }\n</style>\n","import { version } from '../package.json';\nimport fgContainer from './fg-container.vue';\nimport fgItem from './fg-item.vue';\n\nexport default {\n\tversion,\n\tfgContainer,\n\tfgItem\n}\n"],"names":["globalConfig","options","Object","assign","setting","computeCell","opt","cellW","containerW","col","cellH","cellScale","w","h","cellW_Int","Math","floor","cellH_Int","buildArea","max","getMaxRowAndCol","r","row","area","Array","putNodes","nodes","length","n","y","x","c","rlen","clen","node","id","maxCol","collision","init","$parent","padding","left","right","top","bottom","log"],"mappings":"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"}